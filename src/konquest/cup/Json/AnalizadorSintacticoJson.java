
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 17 13:45:48 CST 2020
//----------------------------------------------------

package konquest.cup.Json;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 17 13:45:48 CST 2020
  */
public class AnalizadorSintacticoJson extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJson() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\003\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\007\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\007" +
    "\000\002\006\005\000\002\007\007\000\002\007\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\014\007\000\002\014\005\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\005\000\002\016\007\000\002\016\005\000\002\017" +
    "\005\000\002\017\003\000\002\020\005\000\002\021\005" +
    "\000\002\021\005\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\037\005\001\002\000\004\002\205\001" +
    "\002\000\012\004\012\024\007\030\011\031\010\001\002" +
    "\000\004\040\204\001\002\000\004\041\200\001\002\000" +
    "\004\041\142\001\002\000\004\041\112\001\002\000\004" +
    "\041\016\001\002\000\006\040\ufffe\042\014\001\002\000" +
    "\012\004\012\024\007\030\011\031\010\001\002\000\004" +
    "\040\uffff\001\002\000\004\037\017\001\002\000\022\005" +
    "\026\006\021\011\025\014\030\015\027\016\022\017\031" +
    "\023\024\001\002\000\006\040\ufff8\042\110\001\002\000" +
    "\004\041\073\001\002\000\004\041\071\001\002\000\004" +
    "\040\070\001\002\000\004\041\066\001\002\000\004\041" +
    "\064\001\002\000\004\041\060\001\002\000\004\041\056" +
    "\001\002\000\004\041\054\001\002\000\004\041\032\001" +
    "\002\000\004\037\033\001\002\000\010\020\037\021\040" +
    "\022\034\001\002\000\004\041\052\001\002\000\006\040" +
    "\uffe4\042\050\001\002\000\004\040\047\001\002\000\004" +
    "\041\045\001\002\000\004\041\041\001\002\000\006\012" +
    "\042\013\043\001\002\000\006\040\uffd3\042\uffd3\001\002" +
    "\000\006\040\uffd2\042\uffd2\001\002\000\006\040\uffe2\042" +
    "\uffe2\001\002\000\006\012\042\013\043\001\002\000\006" +
    "\040\uffe3\042\uffe3\001\002\000\006\040\uffef\042\uffef\001" +
    "\002\000\010\020\037\021\040\022\034\001\002\000\004" +
    "\040\uffe5\001\002\000\004\050\053\001\002\000\006\040" +
    "\uffe1\042\uffe1\001\002\000\004\050\055\001\002\000\006" +
    "\040\ufff2\042\ufff2\001\002\000\006\012\042\013\043\001" +
    "\002\000\006\040\ufff1\042\ufff1\001\002\000\010\045\061" +
    "\046\063\051\062\001\002\000\006\040\ufff5\042\ufff5\001" +
    "\002\000\006\040\ufff7\042\ufff7\001\002\000\006\040\ufff6" +
    "\042\ufff6\001\002\000\006\012\042\013\043\001\002\000" +
    "\006\040\ufff3\042\ufff3\001\002\000\004\050\067\001\002" +
    "\000\006\040\uffee\042\uffee\001\002\000\006\040\ufffd\042" +
    "\ufffd\001\002\000\006\012\042\013\043\001\002\000\006" +
    "\040\ufff0\042\ufff0\001\002\000\004\037\074\001\002\000" +
    "\006\007\077\010\075\001\002\000\004\041\106\001\002" +
    "\000\004\042\104\001\002\000\004\041\102\001\002\000" +
    "\004\040\101\001\002\000\006\040\ufff4\042\ufff4\001\002" +
    "\000\004\050\103\001\002\000\006\040\uffd5\042\uffd5\001" +
    "\002\000\006\007\077\010\075\001\002\000\004\040\uffd6" +
    "\001\002\000\004\050\107\001\002\000\006\040\uffd4\042" +
    "\uffd4\001\002\000\022\005\026\006\021\011\025\014\030" +
    "\015\027\016\022\017\031\023\024\001\002\000\004\040" +
    "\ufff9\001\002\000\004\043\113\001\002\000\004\037\115" +
    "\001\002\000\004\044\141\001\002\000\012\022\116\025" +
    "\123\026\120\027\117\001\002\000\004\041\137\001\002" +
    "\000\004\041\135\001\002\000\004\041\133\001\002\000" +
    "\006\040\uffea\042\131\001\002\000\004\040\126\001\002" +
    "\000\004\041\124\001\002\000\004\045\125\001\002\000" +
    "\006\040\uffe9\042\uffe9\001\002\000\006\042\127\044\uffec" +
    "\001\002\000\004\037\115\001\002\000\004\044\uffed\001" +
    "\002\000\012\022\116\025\123\026\120\027\117\001\002" +
    "\000\004\040\uffeb\001\002\000\004\050\134\001\002\000" +
    "\006\040\uffe8\042\uffe8\001\002\000\004\047\136\001\002" +
    "\000\006\040\uffe6\042\uffe6\001\002\000\004\050\140\001" +
    "\002\000\006\040\uffe7\042\uffe7\001\002\000\006\040\ufffb" +
    "\042\ufffb\001\002\000\004\043\143\001\002\000\004\037" +
    "\145\001\002\000\004\044\177\001\002\000\010\025\151" +
    "\032\147\033\152\001\002\000\004\040\174\001\002\000" +
    "\004\041\165\001\002\000\006\040\uffdd\042\163\001\002" +
    "\000\004\041\160\001\002\000\004\041\153\001\002\000" +
    "\010\034\154\035\157\036\156\001\002\000\006\040\uffd1" +
    "\042\uffd1\001\002\000\006\040\uffd9\042\uffd9\001\002\000" +
    "\006\040\uffcf\042\uffcf\001\002\000\006\040\uffd0\042\uffd0" +
    "\001\002\000\006\045\161\046\162\001\002\000\006\040" +
    "\uffdb\042\uffdb\001\002\000\006\040\uffdc\042\uffdc\001\002" +
    "\000\010\025\151\032\147\033\152\001\002\000\004\040" +
    "\uffde\001\002\000\004\043\166\001\002\000\004\045\170" +
    "\001\002\000\004\044\173\001\002\000\006\042\171\044" +
    "\uffd7\001\002\000\004\045\170\001\002\000\004\044\uffd8" +
    "\001\002\000\006\040\uffda\042\uffda\001\002\000\006\042" +
    "\175\044\uffdf\001\002\000\004\037\145\001\002\000\004" +
    "\044\uffe0\001\002\000\006\040\ufffa\042\ufffa\001\002\000" +
    "\004\043\201\001\002\000\004\037\115\001\002\000\004" +
    "\044\203\001\002\000\006\040\ufffc\042\ufffc\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\005\004\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\014\004\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\022\006" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\035\013" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\050\013\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\077\021\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\110\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\113\001\001" +
    "\000\002\001\001\000\006\010\121\011\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\127" +
    "\001\001\000\002\001\001\000\006\010\131\011\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\143\001\001\000\002\001\001\000\006\015\145\016" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\163\016\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Error Sintactico Recuperado");
        System.out.println("\t \tLexema: "+ lexema);
        System.out.println("\t \tFila: "+ fila);
        System.out.println("\t \tColumna: "+ columna);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Error Sintactico Panic Mode");
        System.out.println("\t \tLexema: "+ lexema);
        System.out.println("\t \tFila: "+ fila);
        System.out.println("\t \tColumna: "+ columna);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJson$actions {




  private final AnalizadorSintacticoJson parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJson$actions(AnalizadorSintacticoJson parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJson$do_action(
    int                        CUP$AnalizadorSintacticoJson$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJson$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJson$stack,
    int                        CUP$AnalizadorSintacticoJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJson$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo ::= DIFICIL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Tipo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo ::= FACIL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Tipo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo ::= HUMANO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Tipo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Boolean",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Boolean",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Dimension ::= COLUMNAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Dimension",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Dimension ::= FILAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Dimension",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Dimensiones ::= Dimension COMA Dimension 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Dimensiones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ids_Nombre ::= ID_NOMBRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Ids_Nombre",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ids_Nombre ::= ID_NOMBRE COMA Ids_Nombre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Ids_Nombre",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AtributoJugador ::= TIPO DOS_PUNTOS Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AtributoJugador ::= PLANETASMIN DOS_PUNTOS CORCHETE_A Ids_Nombre CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AtributoJugador ::= NOMBRE DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AtributoJugador ::= NOMBRE DOS_PUNTOS NOMBRE_JUGADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AtribsJugador ::= AtributoJugador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsJugador",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AtribsJugador ::= AtributoJugador COMA AtribsJugador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsJugador",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Jugadores ::= LLAVE_A AtribsJugador LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Jugadores",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Jugadores ::= LLAVE_A AtribsJugador LLAVE_C COMA Jugadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Jugadores",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AtributoNeu ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoNeu",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AtributoNeu ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoNeu",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AtributoNeu ::= MOSTRAR_NAVES DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoNeu",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AtribsNeutrales ::= AtributoNeu 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsNeutrales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AtribsNeutrales ::= AtributoNeu COMA AtribsNeutrales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsNeutrales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AtributoPlaneta ::= PORCENTAJE_MUERTES DOS_PUNTOS DECIMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AtributoPlaneta ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AtributoPlaneta ::= NAVES DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AtributoPlaneta ::= NOMBRE DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AtribsPlaneta ::= AtributoPlaneta 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AtribsPlaneta ::= AtributoPlaneta COMA AtribsPlaneta 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Planetas ::= LLAVE_A AtribsPlaneta LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Planetas",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Planetas ::= LLAVE_A AtribsPlaneta LLAVE_C COMA Planetas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Planetas",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AtributoMapa ::= FINALIZACION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AtributoMapa ::= NEUTRALES DOS_PUNTOS LLAVE_A AtribsNeutrales LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AtributoMapa ::= ACUMULAR DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AtributoMapa ::= MAPA_CIEGO DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AtributoMapa ::= PLANETAS_NEUTRALES_MIN DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AtributoMapa ::= AL_AZAR DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AtributoMapa ::= TAMAÑO DOS_PUNTOS LLAVE_A Dimensiones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AtributoMapa ::= ID DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AtributoMapa ::= ID DOS_PUNTOS NOMBRE_JUGADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtributoMapa ::= ID DOS_PUNTOS ID_MAPA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtribsMapa ::= AtributoMapa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsMapa",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AtribsMapa ::= AtributoMapa COMA AtribsMapa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsMapa",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Comp ::= JUGADORES DOS_PUNTOS CORCHETE_A Jugadores CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Comp ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHETE_A Planetas CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Comp ::= PLANETAS DOS_PUNTOS CORCHETE_A Planetas CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Comp ::= MAPA DOS_PUNTOS LLAVE_A AtribsMapa LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Componentes ::= Comp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Componentes",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Componentes ::= Comp COMA Componentes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Componentes",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= LLAVE_A Componentes LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJson$parser.done_parsing();
          return CUP$AnalizadorSintacticoJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

