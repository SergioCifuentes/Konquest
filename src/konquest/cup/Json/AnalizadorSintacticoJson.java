
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 31 12:37:31 CST 2020
//----------------------------------------------------

package konquest.cup.Json;

import konquest.contrladoresUI.TextoDeAcciones;
import java.awt.Color;
import java.awt.Dimension;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import konquest.ui.FramePrincipal;
import konquest.mapa.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 31 12:37:31 CST 2020
  */
public class AnalizadorSintacticoJson extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJson() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\003\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\005\005\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\007\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\007\000" +
    "\002\006\005\000\002\007\007\000\002\007\005\000\002" +
    "\010\007\000\002\010\005\000\002\012\005\000\002\012" +
    "\003\000\002\012\004\000\002\012\004\000\002\012\003" +
    "\000\002\011\005\000\002\011\003\000\002\011\004\000" +
    "\002\011\004\000\002\011\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\014" +
    "\005\000\002\014\003\000\002\014\004\000\002\014\004" +
    "\000\002\014\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\016\007\000\002\016\005\000\002" +
    "\017\005\000\002\017\003\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\007\000\002\020\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\023\005\000\002" +
    "\023\005\000\002\024\003\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\004\041\005\001\002\000\004\002\234\001" +
    "\002\000\012\004\012\024\007\030\011\031\010\001\002" +
    "\000\004\042\233\001\002\000\004\043\214\001\002\000" +
    "\004\043\153\001\002\000\004\043\120\001\002\000\004" +
    "\043\016\001\002\000\006\042\ufffe\044\014\001\002\000" +
    "\012\004\012\024\007\030\011\031\010\001\002\000\004" +
    "\042\uffff\001\002\000\004\041\017\001\002\000\024\003" +
    "\027\005\026\006\021\011\025\014\031\015\030\016\022" +
    "\017\032\023\024\001\002\000\010\003\116\042\ufff8\044" +
    "\115\001\002\000\004\043\100\001\002\000\004\043\076" +
    "\001\002\000\004\042\075\001\002\000\004\043\073\001" +
    "\002\000\004\043\071\001\002\000\004\043\065\001\002" +
    "\000\026\003\027\005\026\006\021\011\025\014\031\015" +
    "\030\016\022\017\032\023\024\042\ufff5\001\002\000\004" +
    "\043\062\001\002\000\004\043\060\001\002\000\004\043" +
    "\033\001\002\000\004\041\034\001\002\000\012\003\036" +
    "\020\041\021\042\022\035\001\002\000\004\043\056\001" +
    "\002\000\014\003\036\020\041\021\042\022\035\042\uffd4" +
    "\001\002\000\004\042\054\001\002\000\010\003\052\042" +
    "\uffd7\044\051\001\002\000\004\043\047\001\002\000\004" +
    "\043\043\001\002\000\006\012\044\013\045\001\002\000" +
    "\010\003\uffc0\042\uffc0\044\uffc0\001\002\000\010\003\uffbf" +
    "\042\uffbf\044\uffbf\001\002\000\010\003\uffd2\042\uffd2\044" +
    "\uffd2\001\002\000\006\012\044\013\045\001\002\000\010" +
    "\003\uffd3\042\uffd3\044\uffd3\001\002\000\012\003\036\020" +
    "\041\021\042\022\035\001\002\000\004\042\uffd5\001\002" +
    "\000\004\042\uffd8\001\002\000\010\003\uffec\042\uffec\044" +
    "\uffec\001\002\000\004\042\uffd6\001\002\000\004\040\057" +
    "\001\002\000\010\003\uffd1\042\uffd1\044\uffd1\001\002\000" +
    "\004\040\061\001\002\000\010\003\uffef\042\uffef\044\uffef" +
    "\001\002\000\006\012\044\013\045\001\002\000\010\003" +
    "\uffee\042\uffee\044\uffee\001\002\000\004\042\ufff7\001\002" +
    "\000\010\047\066\050\070\051\067\001\002\000\010\003" +
    "\ufff2\042\ufff2\044\ufff2\001\002\000\010\003\ufff4\042\ufff4" +
    "\044\ufff4\001\002\000\010\003\ufff3\042\ufff3\044\ufff3\001" +
    "\002\000\006\012\044\013\045\001\002\000\010\003\ufff0" +
    "\042\ufff0\044\ufff0\001\002\000\004\040\074\001\002\000" +
    "\010\003\uffeb\042\uffeb\044\uffeb\001\002\000\006\042\ufffd" +
    "\044\ufffd\001\002\000\006\012\044\013\045\001\002\000" +
    "\010\003\uffed\042\uffed\044\uffed\001\002\000\004\041\101" +
    "\001\002\000\006\007\104\010\102\001\002\000\004\043" +
    "\113\001\002\000\004\044\111\001\002\000\004\043\107" +
    "\001\002\000\004\042\106\001\002\000\010\003\ufff1\042" +
    "\ufff1\044\ufff1\001\002\000\004\040\110\001\002\000\006" +
    "\042\uffc2\044\uffc2\001\002\000\006\007\104\010\102\001" +
    "\002\000\004\042\uffc3\001\002\000\004\040\114\001\002" +
    "\000\006\042\uffc1\044\uffc1\001\002\000\024\003\027\005" +
    "\026\006\021\011\025\014\031\015\030\016\022\017\032" +
    "\023\024\001\002\000\004\042\ufff6\001\002\000\004\042" +
    "\ufff9\001\002\000\004\045\121\001\002\000\004\041\123" +
    "\001\002\000\004\046\152\001\002\000\014\003\126\022" +
    "\124\025\131\026\127\027\125\001\002\000\004\043\150" +
    "\001\002\000\004\043\146\001\002\000\016\003\126\022" +
    "\124\025\131\026\127\027\125\042\uffdd\001\002\000\004" +
    "\043\143\001\002\000\010\003\141\042\uffe0\044\140\001" +
    "\002\000\004\043\136\001\002\000\004\042\133\001\002" +
    "\000\006\044\134\046\uffe7\001\002\000\004\041\123\001" +
    "\002\000\004\046\uffe8\001\002\000\004\047\137\001\002" +
    "\000\010\003\uffdc\042\uffdc\044\uffdc\001\002\000\014\003" +
    "\126\022\124\025\131\026\127\027\125\001\002\000\004" +
    "\042\uffde\001\002\000\004\042\uffe1\001\002\000\004\040" +
    "\144\001\002\000\010\003\uffdb\042\uffdb\044\uffdb\001\002" +
    "\000\004\042\uffdf\001\002\000\004\037\147\001\002\000" +
    "\010\003\uffd9\042\uffd9\044\uffd9\001\002\000\004\040\151" +
    "\001\002\000\010\003\uffda\042\uffda\044\uffda\001\002\000" +
    "\006\042\ufffb\044\ufffb\001\002\000\004\045\154\001\002" +
    "\000\004\041\156\001\002\000\004\046\213\001\002\000" +
    "\012\003\161\025\163\032\160\033\164\001\002\000\004" +
    "\042\210\001\002\000\004\043\201\001\002\000\014\003" +
    "\161\025\163\032\160\033\164\042\uffca\001\002\000\010" +
    "\003\176\042\uffcd\044\175\001\002\000\004\043\172\001" +
    "\002\000\004\043\165\001\002\000\010\034\166\035\171" +
    "\036\170\001\002\000\010\003\uffbe\042\uffbe\044\uffbe\001" +
    "\002\000\010\003\uffc6\042\uffc6\044\uffc6\001\002\000\010" +
    "\003\uffbc\042\uffbc\044\uffbc\001\002\000\010\003\uffbd\042" +
    "\uffbd\044\uffbd\001\002\000\006\047\173\050\174\001\002" +
    "\000\010\003\uffc8\042\uffc8\044\uffc8\001\002\000\010\003" +
    "\uffc9\042\uffc9\044\uffc9\001\002\000\012\003\161\025\163" +
    "\032\160\033\164\001\002\000\004\042\uffcb\001\002\000" +
    "\004\042\uffce\001\002\000\004\042\uffcc\001\002\000\004" +
    "\045\202\001\002\000\004\047\204\001\002\000\004\046" +
    "\207\001\002\000\006\044\205\046\uffc4\001\002\000\004" +
    "\047\204\001\002\000\004\046\uffc5\001\002\000\010\003" +
    "\uffc7\042\uffc7\044\uffc7\001\002\000\006\044\211\046\uffcf" +
    "\001\002\000\004\041\156\001\002\000\004\046\uffd0\001" +
    "\002\000\006\042\ufffa\044\ufffa\001\002\000\004\045\215" +
    "\001\002\000\004\041\217\001\002\000\004\046\232\001" +
    "\002\000\014\003\220\022\124\025\131\026\127\027\125" +
    "\001\002\000\016\003\220\022\124\025\131\026\127\027" +
    "\125\042\uffe2\001\002\000\010\003\227\042\uffe5\044\226" +
    "\001\002\000\004\042\223\001\002\000\006\044\224\046" +
    "\uffe9\001\002\000\004\041\217\001\002\000\004\046\uffea" +
    "\001\002\000\014\003\220\022\124\025\131\026\127\027" +
    "\125\001\002\000\004\042\uffe3\001\002\000\004\042\uffe6" +
    "\001\002\000\004\042\uffe4\001\002\000\006\042\ufffc\044" +
    "\ufffc\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\005\004\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\014\004\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\022\006" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\063\006\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\036\015\037\001\001\000\002" +
    "\001\001\000\006\014\054\015\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\047\001\001\000\002" +
    "\001\001\000\006\014\052\015\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\104\023\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\116\006\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\121\001\001\000\002\001\001\000\006\011" +
    "\131\013\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\144\013\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\141\013\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\154\001\001" +
    "\000\002\001\001\000\006\017\156\020\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\177\020\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\176" +
    "\020\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\215\001\001\000\002" +
    "\001\001\000\006\012\221\013\220\001\001\000\006\012" +
    "\230\013\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\224\001\001\000\002\001" +
    "\001\000\006\012\227\013\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJson$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   

    }


    public boolean error;
    public boolean errorRecuperable;
    private Mapa mapaResultado;
    protected FramePrincipal fp;
    public  void setFrame(FramePrincipal frame){
        fp =frame;
    }

    public Mapa getMapa(){
        return mapaResultado;
    }
    void setMapa(Mapa mapa){
        mapaResultado =mapa;
    }

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        fp.agregarTextoAcciones("Error Sintactico Recuperado\n");
        fp.agregarTextoAcciones("\t \tLexema: "+ lexema+"\n");
        fp.agregarTextoAcciones("\t \tFila: "+ fila+"\n");
        fp.agregarTextoAcciones("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        fp.agregarTextoAcciones("Error Sintactico Panic Mode\n");
        fp.agregarTextoAcciones("\t \tLexema: "+ lexema+"\n");
        fp.agregarTextoAcciones("\t \tFila: "+ fila+"\n");
        fp.agregarTextoAcciones("\t \tColumna: "+ columna+"\n");
    }

public void ayudarConErrores(String tipo) {

        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
            case "AtributoJugador":
                texto += "Los Jugadores Deben De Poseer nombre,planetas y tipo"
                        + "\nEje: \t nombre: ​ \"Jose\"​ ,\n"
                        + "\tplanetas: [\n"
                        + "\t\"A\"​ ,\n"
                        + "\t\"C\"\n"
                        + "\t],\n"
                        + "\ttipo: HUMANO\n";
                break;
            case "Planeta":
                texto += "Los Planetas Deben De Poseer nombre,naves produccion y porcentajeMuertes"
                        + "\nEje: \t nombre: ​ \"B\"​ ,\n"
                        + "\tnaves: ​ 15​ ,\n"
                        + "\tproduccion: ​ 9 ​ ,\n"
                        + "\tporcentajeMuertes: 0.40\n";
                break;
            case "ConfiguracionNeutral":
                texto += "La Configuracion De Neutrales Deben De Poseer mostrarNaves, mostrarEstadisticas,produccion"
                        + "\nEje: \t mostrarNaves: ​ true​ ,\n"
                        + "\tmostrarEstadisticas: ​ true​ ,\n"
                        + "\tproduccion: ​ 12";
                break;
            case "Mapa":
                texto += "La Configuracion Del Mapa Debe Contener :"
                        + "\nid,tamaño,alAzar, planetasNeutrales,mapaCiego,acumular,NEUTRALESy finalizacion";
                break;
            default:
                throw new AssertionError();
        }
        TextoDeAcciones.appendToPane(fp.getJTextPane(), texto, Color.ORANGE);

    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJson$actions {


    private Mapa mapa;
    private Dimension dimensionMapa=new Dimension();
    private boolean error =false;
    private boolean errorRecuperable=false;
    private Object[] atributosMapa = new Object[8];
    private Object[] atributosPlaneta = new Object[4];
    private Object[] atributosJugador = new Object[3];
    private ArrayList<Object> componentesPrincipales = new ArrayList<>();
    private void resetearAtributosMapa(){
        for(int i=0;i<atributosMapa.length;i++){
            atributosMapa[i]=null;
        }
    }
    private void resetearAtributosPlaneta(){
        for(int i=0;i<atributosPlaneta.length;i++){
            atributosPlaneta[i]=null;
        }
    }
    private void resetearAtributosJugador(){
        for(int i=0;i<atributosJugador.length;i++){
            atributosJugador[i]=null;
        }
    }
    public boolean getError(){
        return error;
    }
    protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoJson asj) {

        asj.fp.agregarTextoAcciones("El atributo " + atributo + " se encuentra repetido\n");

        asj.fp.agregarTextoAcciones("\t \tFila: " + s.right + "\n");
        asj.fp.agregarTextoAcciones("\t \tColumna: " + s.left + "\n");

    }


  private final AnalizadorSintacticoJson parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJson$actions(AnalizadorSintacticoJson parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJson$do_action(
    int                        CUP$AnalizadorSintacticoJson$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJson$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJson$stack,
    int                        CUP$AnalizadorSintacticoJson$top,AnalizadorSintacticoJson asj)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJson$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Tipo ::= DIFICIL 
            {
              Object RESULT =null;
		RESULT=Jugador.TIPO_DIFICIL;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Tipo",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Tipo ::= FACIL 
            {
              Object RESULT =null;
		RESULT=Jugador.TIPO_FACIL;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Tipo",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Tipo ::= HUMANO 
            {
              Object RESULT =null;
		RESULT=Jugador.TIPO_HUMANO;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Tipo",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Boolean ::= FALSE 
            {
              Object RESULT =null;
		RESULT=false;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Boolean",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Boolean ::= TRUE 
            {
              Object RESULT =null;
		RESULT=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Boolean",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Dimension ::= COLUMNAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(dimensionMapa.width==0){
                                                    dimensionMapa.width=Integer.valueOf((String)num);}else{
                                                        errorRecuperable=true;
                                                      mostrarAtributoRepetido("Columna",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);}
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Dimension",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Dimension ::= FILAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(dimensionMapa.height==0){
                                                    dimensionMapa.height=Integer.valueOf((String)num);}else{
                                                        errorRecuperable=true;
                                                      mostrarAtributoRepetido("Fila",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);}
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Dimension",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Dimensiones ::= Dimension COMA Dimension 
            {
              Object RESULT =null;
		RESULT = dimensionMapa;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Dimensiones",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Ids_Nombre ::= ID_NOMBRE 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		ArrayList<String> planetas = new ArrayList<>();
                                        if(nom!=null){planetas.add((String)nom);}
                                        RESULT = planetas;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Ids_Nombre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Ids_Nombre ::= ID_NOMBRE COMA Ids_Nombre 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)).value;
		int nombresleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int nombresright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object nombres = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		ArrayList<String> planetas = new ArrayList<>();
                                                            if(nom!=null){planetas.add((String)nom);}
                                                            for(int i=0;i<((ArrayList<String>)nombres).size();i++){
                                                                        planetas.add(((ArrayList<String>)nombres).get(i));
                                                                         }
                                                            RESULT = planetas;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Ids_Nombre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AtributoJugador ::= TIPO DOS_PUNTOS Tipo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosJugador[2]==null){
                                                        atributosJugador[2]=(Integer)tipo;
                                                        }else{
                                                              errorRecuperable=true;
                                                            mostrarAtributoRepetido("Nombre Jugador",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AtributoJugador ::= PLANETASMIN DOS_PUNTOS CORCHETE_A Ids_Nombre CORCHETE_C 
            {
              Object RESULT =null;
		int planetasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int planetasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object planetas = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		if(atributosJugador[1]==null){
                                                        atributosJugador[1]=(ArrayList<String>)planetas;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("Planetas De Jugador",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AtributoJugador ::= NOMBRE DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosJugador[0]==null){
                                                        atributosJugador[0]=(String)nombre;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("Nombre Jugador",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AtributoJugador ::= NOMBRE DOS_PUNTOS NOMBRE_JUGADOR 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosJugador[0]==null){
                                                        atributosJugador[0]=(String)nombre;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("Nombre Jugador",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AtribsJugador ::= error 
            {
              Object RESULT =null;
		        if(Jugador.verificarObligatorios(atributosJugador)){
                                                                        Jugador jugador = new Jugador(atributosJugador);
                                                                       RESULT =jugador;

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosJugador();asj.ayudarConErrores("AtributoJugador");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsJugador",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AtribsJugador ::= AtributoJugador error 
            {
              Object RESULT =null;
		        if(Jugador.verificarObligatorios(atributosJugador)){
                                                                        Jugador jugador = new Jugador(atributosJugador);
                                                                       RESULT =jugador;

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosJugador();asj.ayudarConErrores("AtributoJugador");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsJugador",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AtribsJugador ::= error AtribsJugador 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT =re;asj.ayudarConErrores("AtributoJugador");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsJugador",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AtribsJugador ::= AtributoJugador 
            {
              Object RESULT =null;
		        if(Jugador.verificarObligatorios(atributosJugador)){
                                                                        Jugador jugador = new Jugador(atributosJugador);
                                                                       RESULT =jugador;

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosJugador();
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsJugador",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AtribsJugador ::= AtributoJugador COMA AtribsJugador 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT =re;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsJugador",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Jugadores ::= LLAVE_A AtribsJugador LLAVE_C 
            {
              Object RESULT =null;
		int jugadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int jugadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object jugador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		
                                                                        ArrayList<Jugador> jugadores= new ArrayList<>();
                                                                        if(jugador!=null){
                                                                        jugadores.add((Jugador) jugador);
                                                                        } RESULT= jugadores;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Jugadores",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Jugadores ::= LLAVE_A AtribsJugador LLAVE_C COMA Jugadores 
            {
              Object RESULT =null;
		int jugadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-3)).left;
		int jugadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-3)).right;
		Object jugador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-3)).value;
		int jugadoresleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int jugadoresright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object jugadores = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		
                                                                                ArrayList<Jugador> jugadoresNuevos = new ArrayList<>();
                                                                                if(jugador!=null){
                                                                        jugadoresNuevos.add((Jugador) jugador);
                                                                        }
                                                                        for(int i=0;i<((ArrayList<Jugador>)jugadores).size();i++){
                                                                        jugadoresNuevos.add(((ArrayList<Jugador>)jugadores).get(i));
                                                                         }
                                                                         RESULT= jugadoresNuevos;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Jugadores",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AtributoNeu ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[2]==null){
                                                        atributosPlaneta[2]=Integer.valueOf((String)num);
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("Produccion",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                        }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoNeu",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AtributoNeu ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS Boolean 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[1]==null){
                                                        atributosPlaneta[1]=(Boolean)bool;
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("Mostrar Estadisticas",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                        }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoNeu",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AtributoNeu ::= MOSTRAR_NAVES DOS_PUNTOS Boolean 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[0]==null){
                                                        atributosPlaneta[0]=(Boolean)bool;
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("Mostrar Naves",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                        }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoNeu",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AtribsNeutrales ::= error 
            {
              Object RESULT =null;
		        if(ConfiguracionNeutrales.verificarObligatorios(atributosPlaneta)){
                                                                        ConfiguracionNeutrales confi = new ConfiguracionNeutrales(atributosPlaneta);
                                                                       RESULT = confi;

                                                                    }else{
                                                                    error=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();asj.ayudarConErrores("ConfiguracionNeutral");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsNeutrales",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AtribsNeutrales ::= AtributoNeu error 
            {
              Object RESULT =null;
		        if(ConfiguracionNeutrales.verificarObligatorios(atributosPlaneta)){
                                                                        ConfiguracionNeutrales confi = new ConfiguracionNeutrales(atributosPlaneta);
                                                                       RESULT = confi;

                                                                    }else{
                                                                    error=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();asj.ayudarConErrores("ConfiguracionNeutral");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsNeutrales",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AtribsNeutrales ::= error AtribsNeutrales 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT =re;asj.ayudarConErrores("ConfiguracionNeutral");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsNeutrales",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AtribsNeutrales ::= AtributoNeu 
            {
              Object RESULT =null;
		        if(ConfiguracionNeutrales.verificarObligatorios(atributosPlaneta)){
                                                                        ConfiguracionNeutrales confi = new ConfiguracionNeutrales(atributosPlaneta);
                                                                       RESULT = confi;

                                                                    }else{
                                                                    error=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsNeutrales",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AtribsNeutrales ::= AtributoNeu COMA AtribsNeutrales 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT =re;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsNeutrales",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AtributoPlaneta ::= PORCENTAJE_MUERTES DOS_PUNTOS DECIMAL 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[3]==null){
                                                                atributosPlaneta[3]=Double.valueOf((String)num);
                                                            }else{
                                                                errorRecuperable=true;
                                                                 mostrarAtributoRepetido("Porcentaje Muertes",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                            }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AtributoPlaneta ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[2]==null){
                                                                atributosPlaneta[2]=Integer.valueOf((String)num);
                                                            }else{
                                                                errorRecuperable=true;
                                                                 mostrarAtributoRepetido("Produccion",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                            }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AtributoPlaneta ::= NAVES DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[1]==null){
                                                                atributosPlaneta[1]=Integer.valueOf((String)num);
                                                            }else{
                                                                errorRecuperable=true;
                                                                 mostrarAtributoRepetido("Naves",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                            }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AtributoPlaneta ::= NOMBRE DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[0]==null){
                                                        atributosPlaneta[0]=(String)nombre;
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("Nombre",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                        }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AtribsPlanetaNeutral ::= error 
            {
              Object RESULT =null;
		        if(PlanetaNeutral.verificarObligatorios(atributosPlaneta)){
                                                                        PlanetaNeutral planeta = new PlanetaNeutral(atributosPlaneta);
                                                                       RESULT = planeta;

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();asj.ayudarConErrores("Planeta");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlanetaNeutral",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AtribsPlanetaNeutral ::= AtributoPlaneta error 
            {
              Object RESULT =null;
		        if(PlanetaNeutral.verificarObligatorios(atributosPlaneta)){
                                                                        PlanetaNeutral planeta = new PlanetaNeutral(atributosPlaneta);
                                                                       RESULT = planeta;

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();asj.ayudarConErrores("Planeta");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlanetaNeutral",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AtribsPlanetaNeutral ::= error AtribsPlanetaNeutral 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT =re;asj.ayudarConErrores("Planeta");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlanetaNeutral",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AtribsPlanetaNeutral ::= AtributoPlaneta 
            {
              Object RESULT =null;
		        if(PlanetaNeutral.verificarObligatorios(atributosPlaneta)){
                                                                        PlanetaNeutral planeta = new PlanetaNeutral(atributosPlaneta);
                                                                       RESULT = planeta;

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlanetaNeutral",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AtribsPlanetaNeutral ::= AtributoPlaneta COMA AtribsPlanetaNeutral 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT =re;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlanetaNeutral",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AtribsPlaneta ::= error 
            {
              Object RESULT =null;
		        if(Planeta.verificarObligatorios(atributosPlaneta)){
                                                                        Planeta planeta = new Planeta(atributosPlaneta);
                                                                       RESULT = planeta;

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();asj.ayudarConErrores("Planeta");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AtribsPlaneta ::= AtributoPlaneta error 
            {
              Object RESULT =null;
		        if(Planeta.verificarObligatorios(atributosPlaneta)){
                                                                        Planeta planeta = new Planeta(atributosPlaneta);
                                                                       RESULT = planeta;

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();asj.ayudarConErrores("Planeta");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AtribsPlaneta ::= error AtribsPlaneta 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT =re;asj.ayudarConErrores("Planeta");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AtribsPlaneta ::= AtributoPlaneta 
            {
              Object RESULT =null;
		        if(Planeta.verificarObligatorios(atributosPlaneta)){
                                                                        Planeta planeta = new Planeta(atributosPlaneta);
                                                                       RESULT = planeta;

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AtribsPlaneta ::= AtributoPlaneta COMA AtribsPlaneta 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT =re;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PlanetasNeutrales ::= LLAVE_A AtribsPlanetaNeutral LLAVE_C 
            {
              Object RESULT =null;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		ArrayList<PlanetaNeutral> planetasNuevas= new ArrayList<>();
                                                                        
                                                                            if(planeta!=null){
                                                                        planetasNuevas.add((PlanetaNeutral) planeta);
                                                                        
                                                                         }RESULT= planetasNuevas;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("PlanetasNeutrales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PlanetasNeutrales ::= LLAVE_A AtribsPlanetaNeutral LLAVE_C COMA PlanetasNeutrales 
            {
              Object RESULT =null;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-3)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-3)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-3)).value;
		int planetasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int planetasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object planetas = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		
                                                                                ArrayList<PlanetaNeutral> planetasNuevas= new ArrayList<>();
                                                                                if(planeta!=null){
                                                                        planetasNuevas.add((PlanetaNeutral) planeta);
                                                                        }
                                                                        for(int i=0;i<((ArrayList<PlanetaNeutral>)planetas).size();i++){
                                                                        planetasNuevas.add(((ArrayList<PlanetaNeutral>)planetas).get(i));
                                                                         }
                                                                         RESULT= planetasNuevas;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("PlanetasNeutrales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Planetas ::= LLAVE_A AtribsPlaneta LLAVE_C 
            {
              Object RESULT =null;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		
                                                                        ArrayList<Planeta> planetasNuevas= new ArrayList<>();
                                                                        if(planeta!=null){
                                                                        planetasNuevas.add((Planeta) planeta);
                                                                        
                                                                        } RESULT= planetasNuevas;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Planetas",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Planetas ::= LLAVE_A AtribsPlaneta LLAVE_C COMA Planetas 
            {
              Object RESULT =null;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-3)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-3)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-3)).value;
		int planetasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int planetasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object planetas = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		
                                                                                ArrayList<Planeta> planetasNuevas= new ArrayList<>();
                                                                                if(planeta!=null){
                                                                        planetasNuevas.add((Planeta) planeta);
                                                                        }
                                                                        for(int i=0;i<((ArrayList<Planeta>)planetas).size();i++){
                                                                        planetasNuevas.add(((ArrayList<Planeta>)planetas).get(i));
                                                                         }
                                                                         RESULT= planetasNuevas;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Planetas",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AtributoMapa ::= FINALIZACION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosMapa[7]==null){
                                                        atributosMapa[7]=Integer.valueOf((String)num);
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("Finalizar",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AtributoMapa ::= NEUTRALES DOS_PUNTOS LLAVE_A AtribsNeutrales LLAVE_C 
            {
              Object RESULT =null;
		int confleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int confright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object conf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		if(atributosMapa[6]==null){
                                                        atributosMapa[6]=(ConfiguracionNeutrales)conf;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("Neutrales",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AtributoMapa ::= ACUMULAR DOS_PUNTOS Boolean 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosMapa[5]==null){
                                                        atributosMapa[5]=(Boolean)bool;
                                                        }else{
                                                                errorRecuperable=true;
                                                            mostrarAtributoRepetido("Acumular",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AtributoMapa ::= MAPA_CIEGO DOS_PUNTOS Boolean 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosMapa[4]==null){
                                                        atributosMapa[4]=(Boolean)bool;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("AL Azar",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AtributoMapa ::= PLANETAS_NEUTRALES_MIN DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosMapa[3]==null){
                                                        atributosMapa[3]=Integer.valueOf((String)num);
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("AL Azar",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AtributoMapa ::= AL_AZAR DOS_PUNTOS Boolean 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosMapa[2]==null){
                                                        atributosMapa[2]=(Boolean)bool;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("AL Azar",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AtributoMapa ::= TAMAÑO DOS_PUNTOS LLAVE_A Dimensiones LLAVE_C 
            {
              Object RESULT =null;
		int dimensionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int dimensionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object dimension = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		if(atributosMapa[1]==null){
                                                        atributosMapa[1]=(Dimension)dimension;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("tamaño",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AtributoMapa ::= ID DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosMapa[0]==null){
                                                        atributosMapa[0]=(String)id;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("Id Mapa",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AtributoMapa ::= ID DOS_PUNTOS NOMBRE_JUGADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosMapa[0]==null){
                                                        atributosMapa[0]=(String)id;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("Id Mapa",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AtributoMapa ::= ID DOS_PUNTOS ID_MAPA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosMapa[0]==null){
                                                        atributosMapa[0]=(String)id;
                                                        }else{
                                                            errorRecuperable=true;
                                                            mostrarAtributoRepetido("Id Mapa",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()),asj);
                                                       }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AtribsMapa ::= error 
            {
              Object RESULT =null;
		        if(Mapa.verificarObligatorios(atributosMapa,asj.fp)){
                                                                        Mapa mapa = new Mapa(atributosMapa);
                                                                       RESULT = mapa;

                                                                    }else{
                                                                    error=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosMapa();asj.ayudarConErrores("Planeta");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsMapa",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AtribsMapa ::= AtributoMapa error 
            {
              Object RESULT =null;
		       if(Mapa.verificarObligatorios(atributosMapa,asj.fp)){
                                                                        Mapa mapa = new Mapa(atributosMapa);
                                                                       RESULT = mapa;

                                                                    }else{
                                                                    error=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosMapa();asj.ayudarConErrores("Planeta");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsMapa",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtribsMapa ::= error AtribsMapa 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT =re;asj.ayudarConErrores("Planeta");
                                        errorRecuperable=true;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsMapa",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtribsMapa ::= AtributoMapa 
            {
              Object RESULT =null;
		        if(Mapa.verificarObligatorios(atributosMapa,asj.fp)){
                                                                        Mapa mapa = new Mapa(atributosMapa);
                                                                       RESULT = mapa;

                                                                    }else{
                                                                    error=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosMapa();
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsMapa",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AtribsMapa ::= AtributoMapa COMA AtribsMapa 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		RESULT = re;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsMapa",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Comp ::= JUGADORES DOS_PUNTOS CORCHETE_A Jugadores CORCHETE_C 
            {
              Object RESULT =null;
		int jugadoresleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int jugadoresright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object jugadores = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		RESULT=jugadores;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Comp ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHETE_A PlanetasNeutrales CORCHETE_C 
            {
              Object RESULT =null;
		int planetasNeutralesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int planetasNeutralesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object planetasNeutrales = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		RESULT = planetasNeutrales;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Comp ::= PLANETAS DOS_PUNTOS CORCHETE_A Planetas CORCHETE_C 
            {
              Object RESULT =null;
		int planetasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int planetasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object planetas = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		RESULT = planetas;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Comp ::= MAPA DOS_PUNTOS LLAVE_A AtribsMapa LLAVE_C 
            {
              Object RESULT =null;
		int mapleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int mapright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object map = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		RESULT= map;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Componentes ::= Comp 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		componentesPrincipales.add(comp);
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Componentes",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Componentes ::= Comp COMA Componentes 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)).value;
		componentesPrincipales.add(comp);
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Componentes",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= LLAVE_A Componentes LLAVE_C 
            {
              Object RESULT =null;
		if(!Mapa.comprobarComponetesDeConstruicion(componentesPrincipales,asj.fp)){
                                                    mapa=Mapa.construirMapa(componentesPrincipales);
                                                      if(!Mapa.verificacionesFinales(mapa,asj.fp)){asj.setMapa(mapa);}else{error=true;}
                                                    }else{error=true;}
                                                        
                                                                           asj.error=this.error;asj.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJson$parser.done_parsing();
          return CUP$AnalizadorSintacticoJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

