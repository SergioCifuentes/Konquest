
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 18 13:59:02 CST 2020
//----------------------------------------------------

package konquest.cup.Json;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import konquest.mapa.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 18 13:59:02 CST 2020
  */
public class AnalizadorSintacticoJson extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJson() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\003\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\007\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\007" +
    "\000\002\006\005\000\002\007\007\000\002\007\005\000" +
    "\002\010\007\000\002\010\005\000\002\012\005\000\002" +
    "\012\003\000\002\012\005\000\002\012\003\000\002\011" +
    "\005\000\002\011\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\016\007\000\002\016\005\000\002\017" +
    "\005\000\002\017\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\007\000\002\020\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\023\005\000\002" +
    "\023\005\000\002\024\003\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\041\005\001\002\000\004\002\220\001" +
    "\002\000\012\004\012\024\007\030\011\031\010\001\002" +
    "\000\004\042\217\001\002\000\004\043\200\001\002\000" +
    "\004\043\142\001\002\000\004\043\112\001\002\000\004" +
    "\043\016\001\002\000\006\042\ufffe\044\014\001\002\000" +
    "\012\004\012\024\007\030\011\031\010\001\002\000\004" +
    "\042\uffff\001\002\000\004\041\017\001\002\000\022\005" +
    "\026\006\021\011\025\014\030\015\027\016\022\017\031" +
    "\023\024\001\002\000\006\042\ufff8\044\110\001\002\000" +
    "\004\043\073\001\002\000\004\043\071\001\002\000\004" +
    "\042\070\001\002\000\004\043\066\001\002\000\004\043" +
    "\064\001\002\000\004\043\060\001\002\000\004\043\056" +
    "\001\002\000\004\043\054\001\002\000\004\043\032\001" +
    "\002\000\004\041\033\001\002\000\010\020\037\021\040" +
    "\022\034\001\002\000\004\043\052\001\002\000\006\042" +
    "\uffde\044\050\001\002\000\004\042\047\001\002\000\004" +
    "\043\045\001\002\000\004\043\041\001\002\000\006\012" +
    "\042\013\043\001\002\000\006\042\uffcd\044\uffcd\001\002" +
    "\000\006\042\uffcc\044\uffcc\001\002\000\006\042\uffdc\044" +
    "\uffdc\001\002\000\006\012\042\013\043\001\002\000\006" +
    "\042\uffdd\044\uffdd\001\002\000\006\042\uffef\044\uffef\001" +
    "\002\000\010\020\037\021\040\022\034\001\002\000\004" +
    "\042\uffdf\001\002\000\004\040\053\001\002\000\006\042" +
    "\uffdb\044\uffdb\001\002\000\004\040\055\001\002\000\006" +
    "\042\ufff2\044\ufff2\001\002\000\006\012\042\013\043\001" +
    "\002\000\006\042\ufff1\044\ufff1\001\002\000\010\047\061" +
    "\050\063\051\062\001\002\000\006\042\ufff5\044\ufff5\001" +
    "\002\000\006\042\ufff7\044\ufff7\001\002\000\006\042\ufff6" +
    "\044\ufff6\001\002\000\006\012\042\013\043\001\002\000" +
    "\006\042\ufff3\044\ufff3\001\002\000\004\040\067\001\002" +
    "\000\006\042\uffee\044\uffee\001\002\000\006\042\ufffd\044" +
    "\ufffd\001\002\000\006\012\042\013\043\001\002\000\006" +
    "\042\ufff0\044\ufff0\001\002\000\004\041\074\001\002\000" +
    "\006\007\077\010\075\001\002\000\004\043\106\001\002" +
    "\000\004\044\104\001\002\000\004\043\102\001\002\000" +
    "\004\042\101\001\002\000\006\042\ufff4\044\ufff4\001\002" +
    "\000\004\040\103\001\002\000\006\042\uffcf\044\uffcf\001" +
    "\002\000\006\007\077\010\075\001\002\000\004\042\uffd0" +
    "\001\002\000\004\040\107\001\002\000\006\042\uffce\044" +
    "\uffce\001\002\000\022\005\026\006\021\011\025\014\030" +
    "\015\027\016\022\017\031\023\024\001\002\000\004\042" +
    "\ufff9\001\002\000\004\045\113\001\002\000\004\041\115" +
    "\001\002\000\004\046\141\001\002\000\012\022\116\025" +
    "\122\026\120\027\117\001\002\000\004\043\137\001\002" +
    "\000\004\043\135\001\002\000\004\043\133\001\002\000" +
    "\006\042\uffe4\044\131\001\002\000\004\043\127\001\002" +
    "\000\004\042\124\001\002\000\006\044\125\046\uffea\001" +
    "\002\000\004\041\115\001\002\000\004\046\uffeb\001\002" +
    "\000\004\047\130\001\002\000\006\042\uffe3\044\uffe3\001" +
    "\002\000\012\022\116\025\122\026\120\027\117\001\002" +
    "\000\004\042\uffe5\001\002\000\004\040\134\001\002\000" +
    "\006\042\uffe2\044\uffe2\001\002\000\004\037\136\001\002" +
    "\000\006\042\uffe0\044\uffe0\001\002\000\004\040\140\001" +
    "\002\000\006\042\uffe1\044\uffe1\001\002\000\006\042\ufffb" +
    "\044\ufffb\001\002\000\004\045\143\001\002\000\004\041" +
    "\145\001\002\000\004\046\177\001\002\000\010\025\150" +
    "\032\147\033\152\001\002\000\004\042\174\001\002\000" +
    "\004\043\165\001\002\000\004\043\162\001\002\000\006" +
    "\042\uffd7\044\160\001\002\000\004\043\153\001\002\000" +
    "\010\034\154\035\157\036\156\001\002\000\006\042\uffcb" +
    "\044\uffcb\001\002\000\006\042\uffd3\044\uffd3\001\002\000" +
    "\006\042\uffc9\044\uffc9\001\002\000\006\042\uffca\044\uffca" +
    "\001\002\000\010\025\150\032\147\033\152\001\002\000" +
    "\004\042\uffd8\001\002\000\006\047\163\050\164\001\002" +
    "\000\006\042\uffd5\044\uffd5\001\002\000\006\042\uffd6\044" +
    "\uffd6\001\002\000\004\045\166\001\002\000\004\047\167" +
    "\001\002\000\006\044\172\046\uffd1\001\002\000\004\046" +
    "\171\001\002\000\006\042\uffd4\044\uffd4\001\002\000\004" +
    "\047\167\001\002\000\004\046\uffd2\001\002\000\006\044" +
    "\175\046\uffd9\001\002\000\004\041\145\001\002\000\004" +
    "\046\uffda\001\002\000\006\042\ufffa\044\ufffa\001\002\000" +
    "\004\045\201\001\002\000\004\041\203\001\002\000\004" +
    "\046\216\001\002\000\014\003\204\022\116\025\122\026" +
    "\120\027\117\001\002\000\006\042\uffe6\044\214\001\002" +
    "\000\006\042\uffe8\044\212\001\002\000\004\042\207\001" +
    "\002\000\006\044\210\046\uffec\001\002\000\004\041\203" +
    "\001\002\000\004\046\uffed\001\002\000\014\003\204\022" +
    "\116\025\122\026\120\027\117\001\002\000\004\042\uffe9" +
    "\001\002\000\014\003\204\022\116\025\122\026\120\027" +
    "\117\001\002\000\004\042\uffe7\001\002\000\006\042\ufffc" +
    "\044\ufffc\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\005\004\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\014\004\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\022\006" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\035\015" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\050\015\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\077\023\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\110\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\113\001\001" +
    "\000\002\001\001\000\006\011\122\013\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\131\013\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\143\001\001\000\002\001\001\000\006\017\145\020" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\160\020\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\201\001\001\000" +
    "\002\001\001\000\006\012\205\013\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\210\001\001\000\002\001\001\000\006" +
    "\012\212\013\204\001\001\000\002\001\001\000\006\012" +
    "\214\013\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJson$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    

    }


    public boolean error;
    Mapa mapaResultado;
    public Mapa getMapa(){
        return mapaResultado;
    }
    void setMapa(Mapa mapa){
        mapaResultado =mapa;
    }

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Error Sintactico Recuperado");
        System.out.println("\t \tLexema: "+ lexema);
        System.out.println("\t \tFila: "+ fila);
        System.out.println("\t \tColumna: "+ columna);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Error Sintactico Panic Mode");
        System.out.println("\t \tLexema: "+ lexema);
        System.out.println("\t \tFila: "+ fila);
        System.out.println("\t \tColumna: "+ columna);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJson$actions {


    private Mapa mapa= new Mapa();
    private boolean error =false;
    private Object[] atributosPlaneta = new Object[4];

    private void resetearAtributosPlaneta(){
        for(int i=0;i<atributosPlaneta.length;i++){
            atributosPlaneta[i]=null;
        }
    }
    public boolean getError(){
        return error;
    }
    private void mostrarAtributoRepetido(String atributo,Symbol s){
    System.out.println("El atributo "+atributo+" se encuentra repetido");
        System.out.println("Fila :"+s.right);
    System.out.println("Columna :"+s.left);

}


  private final AnalizadorSintacticoJson parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJson$actions(AnalizadorSintacticoJson parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJson$do_action(
    int                        CUP$AnalizadorSintacticoJson$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJson$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJson$stack,
    int                        CUP$AnalizadorSintacticoJson$top,AnalizadorSintacticoJson asj)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJson$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo ::= DIFICIL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Tipo",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo ::= FACIL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Tipo",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo ::= HUMANO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Tipo",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Boolean",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Boolean",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Dimension ::= COLUMNAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Dimension",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Dimension ::= FILAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Dimension",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Dimensiones ::= Dimension COMA Dimension 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Dimensiones",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Ids_Nombre ::= ID_NOMBRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Ids_Nombre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Ids_Nombre ::= ID_NOMBRE COMA Ids_Nombre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Ids_Nombre",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AtributoJugador ::= TIPO DOS_PUNTOS Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AtributoJugador ::= PLANETASMIN DOS_PUNTOS CORCHETE_A Ids_Nombre CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AtributoJugador ::= NOMBRE DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AtributoJugador ::= NOMBRE DOS_PUNTOS NOMBRE_JUGADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoJugador",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AtribsJugador ::= AtributoJugador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsJugador",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AtribsJugador ::= AtributoJugador COMA AtribsJugador 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsJugador",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Jugadores ::= LLAVE_A AtribsJugador LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Jugadores",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Jugadores ::= LLAVE_A AtribsJugador LLAVE_C COMA Jugadores 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Jugadores",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AtributoNeu ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoNeu",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AtributoNeu ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoNeu",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AtributoNeu ::= MOSTRAR_NAVES DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoNeu",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AtribsNeutrales ::= AtributoNeu 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsNeutrales",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AtribsNeutrales ::= AtributoNeu COMA AtribsNeutrales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsNeutrales",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AtributoPlaneta ::= PORCENTAJE_MUERTES DOS_PUNTOS DECIMAL 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[3]==null){
                                                                atributosPlaneta[3]=Double.valueOf((String)num);
                                                            }else{
                                                                 mostrarAtributoRepetido("Porcentaje Muertes",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()));
                                                            }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AtributoPlaneta ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[2]==null){
                                                                atributosPlaneta[2]=Integer.valueOf((String)num);
                                                            }else{
                                                                 mostrarAtributoRepetido("Produccion",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()));
                                                            }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AtributoPlaneta ::= NAVES DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[1]==null){
                                                                atributosPlaneta[1]=Integer.valueOf((String)num);
                                                            }else{
                                                                 mostrarAtributoRepetido("Naves",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()));
                                                            }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AtributoPlaneta ::= NOMBRE DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()).value;
		if(atributosPlaneta[0]==null){
                                                        atributosPlaneta[0]=(String)nombre;
                                                        }else{
                                                             mostrarAtributoRepetido("Nombre",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.peek()));
                                                        }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AtribsPlanetaNeutral ::= AtributoPlaneta 
            {
              Object RESULT =null;
		if(PlanetaNeutral.verificarObligatorios(atributosPlaneta)){
                                                                        PlanetaNeutral planeta = new PlanetaNeutral(atributosPlaneta);
                                                                           resetearAtributosPlaneta(); 
                                                                        }else{
                                                                            error=true;
                                                                        }
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlanetaNeutral",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AtribsPlanetaNeutral ::= AtributoPlaneta COMA AtribsPlanetaNeutral 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlanetaNeutral",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AtribsPlaneta ::= error 
            {
              Object RESULT =null;
		        if(Planeta.verificarObligatorios(atributosPlaneta)){
                                                                        Planeta planeta = new Planeta(atributosPlaneta);
                                                                        
                                                                    }else{
                                                                    error=true;}
                                                                    resetearAtributosPlaneta(); 
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AtribsPlaneta ::= error COMA AtribsPlaneta 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AtribsPlaneta ::= AtributoPlaneta 
            {
              Object RESULT =null;
		        if(Planeta.verificarObligatorios(atributosPlaneta)){
                                                                        Planeta planeta = new Planeta(atributosPlaneta);
                                                                        
                                                                    }else{
                                                                    error=true;} 
                                                                    resetearAtributosPlaneta();
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AtribsPlaneta ::= AtributoPlaneta COMA AtribsPlaneta 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsPlaneta",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PlanetasNeutrales ::= LLAVE_A AtribsPlanetaNeutral LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("PlanetasNeutrales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PlanetasNeutrales ::= LLAVE_A AtribsPlanetaNeutral LLAVE_C COMA PlanetasNeutrales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("PlanetasNeutrales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Planetas ::= LLAVE_A AtribsPlaneta LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Planetas",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Planetas ::= LLAVE_A AtribsPlaneta LLAVE_C COMA Planetas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Planetas",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AtributoMapa ::= FINALIZACION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AtributoMapa ::= NEUTRALES DOS_PUNTOS LLAVE_A AtribsNeutrales LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AtributoMapa ::= ACUMULAR DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AtributoMapa ::= MAPA_CIEGO DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AtributoMapa ::= PLANETAS_NEUTRALES_MIN DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AtributoMapa ::= AL_AZAR DOS_PUNTOS Boolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AtributoMapa ::= TAMAÑO DOS_PUNTOS LLAVE_A Dimensiones LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AtributoMapa ::= ID DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AtributoMapa ::= ID DOS_PUNTOS NOMBRE_JUGADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtributoMapa ::= ID DOS_PUNTOS ID_MAPA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtributoMapa",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtribsMapa ::= AtributoMapa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsMapa",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AtribsMapa ::= AtributoMapa COMA AtribsMapa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("AtribsMapa",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Comp ::= JUGADORES DOS_PUNTOS CORCHETE_A Jugadores CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Comp ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHETE_A PlanetasNeutrales CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Comp ::= PLANETAS DOS_PUNTOS CORCHETE_A Planetas CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Comp ::= MAPA DOS_PUNTOS LLAVE_A AtribsMapa LLAVE_C 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Comp",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Componentes ::= Comp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Componentes",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Componentes ::= Comp COMA Componentes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Componentes",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= LLAVE_A Componentes LLAVE_C 
            {
              Object RESULT =null;
		asj.setMapa(mapa);asj.error=this.error;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.elementAt(CUP$AnalizadorSintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJson$parser.done_parsing();
          return CUP$AnalizadorSintacticoJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

