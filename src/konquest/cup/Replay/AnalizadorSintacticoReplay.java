
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 29 13:29:54 CST 2020
//----------------------------------------------------

package konquest.cup.Replay;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import konquest.ui.FramePrincipal;
import konquest.Replay.Objetos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 29 13:29:54 CST 2020
  */
public class AnalizadorSintacticoReplay extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoReplay() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoReplay(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoReplay(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\003\000\002\006\007\000\002\006\007" +
    "\000\002\006\005\000\002\006\003\000\002\004\007\000" +
    "\002\004\005\000\002\005\005\000\002\005\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\011\000\002\010\007\000" +
    "\002\011\007\000\002\011\005\000\002\011\002\000\002" +
    "\012\005\000\002\012\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\003\000\002\014\003" +
    "\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\022\005\001\002\000\004\002\122\001" +
    "\002\000\012\003\007\004\011\005\006\013\013\001\002" +
    "\000\004\024\065\001\002\000\006\023\ufffa\025\ufffa\001" +
    "\002\000\004\023\064\001\002\000\004\024\022\001\002" +
    "\000\006\023\ufffe\025\020\001\002\000\004\024\014\001" +
    "\002\000\006\020\015\021\016\001\002\000\006\023\uffe2" +
    "\025\uffe2\001\002\000\006\023\uffe1\025\uffe1\001\002\000" +
    "\006\023\ufffb\025\ufffb\001\002\000\012\003\007\004\011" +
    "\005\006\013\013\001\002\000\004\023\uffff\001\002\000" +
    "\004\026\023\001\002\000\004\022\025\001\002\000\004" +
    "\027\063\001\002\000\022\003\032\006\026\007\027\010" +
    "\035\011\036\012\037\014\030\015\031\001\002\000\004" +
    "\024\061\001\002\000\004\024\057\001\002\000\004\024" +
    "\055\001\002\000\004\024\053\001\002\000\006\023\uffee" +
    "\025\uffee\001\002\000\006\023\ufff6\025\051\001\002\000" +
    "\004\023\046\001\002\000\004\024\044\001\002\000\004" +
    "\024\042\001\002\000\004\024\040\001\002\000\004\031" +
    "\041\001\002\000\006\023\uffef\025\uffef\001\002\000\004" +
    "\030\043\001\002\000\006\023\ufff0\025\ufff0\001\002\000" +
    "\004\032\045\001\002\000\006\023\ufff5\025\ufff5\001\002" +
    "\000\006\025\047\027\ufff8\001\002\000\004\022\025\001" +
    "\002\000\004\027\ufff9\001\002\000\022\003\032\006\026" +
    "\007\027\010\035\011\036\012\037\014\030\015\031\001" +
    "\002\000\004\023\ufff7\001\002\000\004\030\054\001\002" +
    "\000\006\023\ufff3\025\ufff3\001\002\000\004\030\056\001" +
    "\002\000\006\023\ufff4\025\ufff4\001\002\000\004\030\060" +
    "\001\002\000\006\023\ufff1\025\ufff1\001\002\000\004\033" +
    "\062\001\002\000\006\023\ufff2\025\ufff2\001\002\000\006" +
    "\023\ufffd\025\ufffd\001\002\000\004\002\000\001\002\000" +
    "\004\022\066\001\002\000\004\030\070\001\002\000\004" +
    "\023\121\001\002\000\004\024\071\001\002\000\004\026" +
    "\072\001\002\000\006\022\074\027\uffe9\001\002\000\004" +
    "\027\116\001\002\000\012\003\077\007\101\016\100\017" +
    "\076\001\002\000\006\023\uffe7\025\114\001\002\000\004" +
    "\024\112\001\002\000\006\023\uffe3\025\uffe3\001\002\000" +
    "\004\024\110\001\002\000\004\024\106\001\002\000\004" +
    "\023\103\001\002\000\006\025\104\027\uffea\001\002\000" +
    "\006\022\074\027\uffe9\001\002\000\004\027\uffeb\001\002" +
    "\000\004\030\107\001\002\000\006\023\uffe4\025\uffe4\001" +
    "\002\000\004\032\111\001\002\000\006\023\uffe6\025\uffe6" +
    "\001\002\000\004\032\113\001\002\000\006\023\uffe5\025" +
    "\uffe5\001\002\000\012\003\077\007\101\016\100\017\076" +
    "\001\002\000\004\023\uffe8\001\002\000\006\023\uffec\025" +
    "\117\001\002\000\004\030\070\001\002\000\004\023\uffed" +
    "\001\002\000\006\023\ufffc\025\ufffc\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\007\006\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\020\006\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\023\001\001\000\002\001\001\000\006\005" +
    "\033\007\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\047\001" +
    "\001\000\002\001\001\000\006\005\051\007\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\072\001\001\000\002\001\001\000\006" +
    "\012\101\013\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\114\013\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoReplay$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoReplay$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoReplay$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



private ComponenteReplay replay = new ComponenteReplay();
    public boolean error;
    public boolean errorRecuperable;
private int rondaMayor;

        public ComponenteReplay getReplay(){
        return replay;
    }
public int getRondaMayor(){
    return rondaMayor;
}
public void setRondaMayor(int ronda){
    System.out.println("RONDA MAYOR"+ronda);
    this.rondaMayor=ronda;
}
    void setReplay(ComponenteReplay r){
        replay =r;
    }

    protected FramePrincipal fp;
    public  void setFrame(FramePrincipal frame){
        fp =frame;
    }


    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        fp.agregarTextoAcciones("Error Sintactico Recuperado\n");
        fp.agregarTextoAcciones("\t \tLexema: "+ lexema+"\n");
        fp.agregarTextoAcciones("\t \tFila: "+ fila+"\n");
        fp.agregarTextoAcciones("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        fp.agregarTextoAcciones("Error Sintactico Panic Mode\n");
        fp.agregarTextoAcciones("\t \tLexema: "+ lexema+"\n");
        fp.agregarTextoAcciones("\t \tFila: "+ fila+"\n");
        fp.agregarTextoAcciones("\t \tColumna: "+ columna+"\n");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoReplay$actions {


    private Object[] atributosPlaneta = new Object[7];
    private boolean error =false;
    private boolean errorRecuperable=false;
private Object[] atributosRonda = new Object[3];
private ComponenteReplay replay = new ComponenteReplay();
private int rondaMayor=0;
    private void resetearAtributosPlaneta(){
        for(int i=0;i<atributosPlaneta.length;i++){
            atributosPlaneta[i]=null;
        }
    }
private void resetearAtributosRondas(){
        for(int i=0;i<atributosRonda.length;i++){
            atributosRonda[i]=null;
        }
    }
        protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoReplay asr) {

        asr.fp.agregarTextoAcciones("El atributo " + atributo + " se encuentra repetido\n");

        asr.fp.agregarTextoAcciones("\t \tFila: " + s.right + "\n");
        asr.fp.agregarTextoAcciones("\t \tColumna: " + s.left + "\n");

    }


  private final AnalizadorSintacticoReplay parser;

  /** Constructor */
  CUP$AnalizadorSintacticoReplay$actions(AnalizadorSintacticoReplay parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoReplay$do_action(
    int                        CUP$AnalizadorSintacticoReplay$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoReplay$parser,
    java.util.Stack            CUP$AnalizadorSintacticoReplay$stack,
    int                        CUP$AnalizadorSintacticoReplay$top,AnalizadorSintacticoReplay asr)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoReplay$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoReplay$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Boolean ::= FALSE 
            {
              Object RESULT =null;
		RESULT=false;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Boolean",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Boolean ::= TRUE 
            {
              Object RESULT =null;
		RESULT=true;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Boolean",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AtributoEnvio ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoEnvio",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AtributoEnvio ::= NAVES DOS_PUNTOS ENTERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosRonda[2]==null){
                                                        atributosRonda[2]=Integer.valueOf((String)numero);
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("naves",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoEnvio",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AtributoEnvio ::= DESTINO DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosRonda[1]==null){
                                                        atributosRonda[1]=(String)nombre;
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("destino",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoEnvio",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AtributoEnvio ::= ORIGEN DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosRonda[0]==null){
                                                        atributosRonda[0]=(String)nombre;
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("origen",((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoEnvio",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Envio ::= AtributoEnvio 
            {
              Object RESULT =null;
		        if(EnvioReplay.verificarObligatorios(atributosRonda,asr.fp)){
                                                                        EnvioReplay pi=new EnvioReplay(atributosRonda);
                                                                       RESULT = pi;

                                                                    }else{
                                                                    error=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosRondas();
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Envio",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Envio ::= AtributoEnvio COMA Envio 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		RESULT =re;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Envio",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Envios ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Envios",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Envios ::= LLAVE_A Envio LLAVE_C 
            {
              Object RESULT =null;
		int envioleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).left;
		int envioright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).right;
		Object envio = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).value;
		  ArrayList<EnvioReplay> envios= new ArrayList<>();
                                                                        if(envio!=null){
                                                                        envios.add((EnvioReplay) envio);
                                                                        
                                                                        } RESULT= envios;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Envios",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Envios ::= LLAVE_A Envio LLAVE_C COMA Envios 
            {
              Object RESULT =null;
		int envioleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-3)).left;
		int envioright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-3)).right;
		Object envio = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-3)).value;
		int enviosAnleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int enviosAnright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object enviosAn = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		 ArrayList<EnvioReplay> envios= new ArrayList<>();
                                                                                if(envio!=null){
                                                                        envios.add((EnvioReplay) envio);
                                                                        }
                                                                        for(int i=0;i<((ArrayList<EnvioReplay>)enviosAn).size();i++){
                                                                        envios.add(((ArrayList<EnvioReplay>)enviosAn).get(i));
                                                                         }
                                                                         RESULT= envios;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Envios",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Rondas ::= ENTERO DOS_PUNTOS CORCHETE_A Envios CORCHETE_C 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-4)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-4)).value;
		int enviosAnleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).left;
		int enviosAnright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).right;
		Object enviosAn = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).value;
		if(enviosAn!=null){
                                                                    for(int i=0;i<((ArrayList<EnvioReplay>)enviosAn).size();i++){
                                                                        ((ArrayList<EnvioReplay>)enviosAn).get(i).setRonda(Integer.valueOf((String)num));
                                                                         }replay.agregarEnvios(((ArrayList<EnvioReplay>)enviosAn));
                                                                            }if(Integer.valueOf((String)num)>rondaMayor)
                                                                            {rondaMayor=Integer.valueOf((String)num);}
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Rondas",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Rondas ::= ENTERO DOS_PUNTOS CORCHETE_A Envios CORCHETE_C COMA Rondas 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-6)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-6)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-6)).value;
		int enviosAnleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-3)).left;
		int enviosAnright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-3)).right;
		Object enviosAn = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-3)).value;
		if(enviosAn!=null){
                                                                        for(int i=0;i<((ArrayList<EnvioReplay>)enviosAn).size();i++){
                                                                        ((ArrayList<EnvioReplay>)enviosAn).get(i).setRonda(Integer.valueOf((String)num));
                                                                         }replay.agregarEnvios(((ArrayList<EnvioReplay>)enviosAn));}
                                                                        if(Integer.valueOf((String)num)>rondaMayor){rondaMayor=Integer.valueOf((String)num);}
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Rondas",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AtributoPlaneta ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AtributoPlaneta ::= PORCENTAJE_MUERTES DOS_PUNTOS DECIMAL 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosPlaneta[6]==null){
                                                        atributosPlaneta[6]=Double.valueOf((String)numero);
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("Porcentaje",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AtributoPlaneta ::= PRODUCCION DOS_PUNTOS ENTERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosPlaneta[5]==null){
                                                        atributosPlaneta[5]=Integer.valueOf((String)numero);
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("Produccion",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AtributoPlaneta ::= NAVES DOS_PUNTOS ENTERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosPlaneta[4]==null){
                                                        atributosPlaneta[4]=Integer.valueOf((String)numero);
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("naves",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AtributoPlaneta ::= DUE DOS_PUNTOS NOMBRE_JUGADOR 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosPlaneta[3]==null){
                                                        atributosPlaneta[3]=(String)nombre;
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("dueño",((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AtributoPlaneta ::= COLUMNA DOS_PUNTOS ENTERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosPlaneta[2]==null){
                                                        atributosPlaneta[2]=Integer.valueOf((String)numero);
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("Columna",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AtributoPlaneta ::= FILA DOS_PUNTOS ENTERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosPlaneta[1]==null){
                                                        atributosPlaneta[1]=Integer.valueOf((String)numero);
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("Fila",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AtributoPlaneta ::= NOMBRE DOS_PUNTOS ID_NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(atributosPlaneta[0]==null){
                                                        atributosPlaneta[0]=(String)nombre;
                                                        }else{
                                                            errorRecuperable=true;
                                                             mostrarAtributoRepetido("Nombre",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                        }
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("AtributoPlaneta",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Planeta ::= AtributoPlaneta 
            {
              Object RESULT =null;
		        if(PartidaInicial.verificarObligatorios(atributosPlaneta,asr.fp)){
                                                                        PartidaInicial pi=new PartidaInicial(atributosPlaneta);
                                                                       RESULT = pi;

                                                                    }else{
                                                                    error=true;
                                                                    RESULT = null;} 
                                                                    resetearAtributosPlaneta();
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Planeta",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Planeta ::= AtributoPlaneta COMA Planeta 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		RESULT = re;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Planeta",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Planetas ::= LLAVE_A Planeta LLAVE_C 
            {
              Object RESULT =null;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).value;
		
                                                                        ArrayList<PartidaInicial> partidaInicialesNuevas= new ArrayList<>();
                                                                        if(planeta!=null){
                                                                        partidaInicialesNuevas.add((PartidaInicial) planeta);
                                                                        
                                                                        } RESULT= partidaInicialesNuevas;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Planetas",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Planetas ::= LLAVE_A Planeta LLAVE_C COMA Planetas 
            {
              Object RESULT =null;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-3)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-3)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-3)).value;
		int planetasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int planetasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object planetas = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		 ArrayList<PartidaInicial> partidaInicialesNuevas= new ArrayList<>();
                                                                                if(planeta!=null){
                                                                        partidaInicialesNuevas.add((PartidaInicial) planeta);
                                                                        }
                                                                        for(int i=0;i<((ArrayList<PartidaInicial>)planetas).size();i++){
                                                                        partidaInicialesNuevas.add(((ArrayList<PartidaInicial>)planetas).get(i));
                                                                         }
                                                                         RESULT= partidaInicialesNuevas;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Planetas",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Componente ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Componente",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Componente ::= TERMINADO DOS_PUNTOS Boolean 
            {
              Object RESULT =null;
		int terminadoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).left;
		int terminadoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()).right;
		Object terminado = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()).value;
		if(replay.isTerminado()==null){
                                                                        replay.setTerminado((Boolean) terminado);
                                                                       

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    mostrarAtributoRepetido("terminado",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                                    RESULT = null;} 
                                                                    
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Componente",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Componente ::= RONDAS DOS_PUNTOS LLAVE_A Rondas LLAVE_C 
            {
              Object RESULT =null;
		int rondasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).left;
		int rondasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).right;
		Object rondas = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).value;

              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Componente",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Componente ::= PLANETAS DOS_PUNTOS CORCHETE_A Planetas CORCHETE_C 
            {
              Object RESULT =null;
		int partidasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).left;
		int partidasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).right;
		Object partidas = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).value;
		if(replay.getPartidas()==null){
                                                                        replay.setPartidas((ArrayList<PartidaInicial>) partidas);
                                                                       

                                                                    }else{
                                                                    errorRecuperable=true;
                                                                    mostrarAtributoRepetido("PLANETAS",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.peek()),asr);
                                                                    RESULT = null;} 
                                                                    
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Componente",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Componentes ::= Componente 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Componentes",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Componentes ::= Componente COMA Componentes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Componentes",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= LLAVE_A Componentes LLAVE_C 
            {
              Object RESULT =null;
		asr.setReplay(replay);
                                                        
                                                                           asr.error=this.error;asr.setRondaMayor(rondaMayor);asr.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoReplay$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.elementAt(CUP$AnalizadorSintacticoReplay$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoReplay$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoReplay$parser.done_parsing();
          return CUP$AnalizadorSintacticoReplay$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

