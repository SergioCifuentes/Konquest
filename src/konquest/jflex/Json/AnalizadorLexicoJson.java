/* The following code was generated by JFlex 1.4.3 on 3/17/20 1:38 PM */

package konquest.jflex.Json;
import java_cup.runtime.Symbol;
import konquest.cup.Json.SimbolosJson;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/17/20 1:38 PM from the specification file
 * <tt>lexicoJson.jflex</tt>
 */
public class AnalizadorLexicoJson implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\66\1\66\1\0\2\66\22\0\1\63\1\0\1\62\1\0"+
    "\1\2\7\0\1\57\1\2\1\65\1\0\1\64\11\3\1\56\6\0"+
    "\1\5\1\1\1\31\1\47\1\33\1\52\1\46\1\51\1\53\1\45"+
    "\1\1\1\37\1\4\1\30\1\50\1\6\1\1\1\36\1\40\1\35"+
    "\1\34\5\1\1\60\1\0\1\61\1\0\1\44\1\0\1\12\1\42"+
    "\1\21\1\10\1\26\1\16\1\32\1\1\1\7\1\43\1\1\1\17"+
    "\1\13\1\23\1\15\1\27\1\1\1\25\1\20\1\11\1\22\1\41"+
    "\3\1\1\24\1\54\1\0\1\55\163\0\1\14\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\17\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\2\2\0\1\12\60\0"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\1\0\1\20"+
    "\24\0\1\21\6\0\1\22\1\0\1\23\1\0\1\24"+
    "\10\0\1\25\2\0\1\26\1\27\5\0\1\30\6\0"+
    "\1\31\14\0\1\32\1\0\1\33\1\34\4\0\1\35"+
    "\1\0\1\36\5\0\1\37\6\0\1\40\1\41\7\0"+
    "\1\42\11\0\1\43\1\0\1\44\24\0\1\45\1\46"+
    "\1\47\1\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u03de\0\67\0\u0415\0\u044c\0\u0483\0\67\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\67\0\67"+
    "\0\u0974\0\67\0\u0f0a\0\67\0\u0f41\0\67\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\67\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0"+
    "\0\u14d7\0\67\0\u150e\0\67\0\u1545\0\67\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\67\0\u1734"+
    "\0\u176b\0\67\0\67\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\67\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\67"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\67\0\u1c93\0\u1cca\0\67"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\67\0\u1ddd\0\u1e14\0\u1e4b"+
    "\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\67\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u2003\0\u203a\0\u2071\0\67\0\67\0\u20a8\0\u20df\0\u2116"+
    "\0\u214d\0\u2184\0\u21bb\0\u21f2\0\67\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\67\0\u2418"+
    "\0\67\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599"+
    "\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751"+
    "\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\67\0\67\0\67"+
    "\0\u289b\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\2\1\3\1\4\1\2\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\2\2\1\12\2\2\1\13\1\2\1\14"+
    "\3\2\1\15\1\16\14\2\1\17\1\2\1\20\1\2"+
    "\1\21\1\22\1\2\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\2\1\32\72\0\1\3"+
    "\60\0\1\3\7\0\1\34\120\0\1\35\37\0\1\36"+
    "\65\0\1\37\2\0\1\40\12\0\1\41\60\0\1\42"+
    "\1\0\1\43\57\0\1\44\2\0\1\45\60\0\1\46"+
    "\2\0\1\47\71\0\1\50\63\0\1\51\2\0\1\52"+
    "\66\0\1\53\1\0\1\54\5\0\1\55\74\0\1\56"+
    "\67\0\1\57\105\0\1\60\47\0\1\61\37\0\1\62"+
    "\62\0\1\63\1\64\1\0\10\63\1\0\27\63\1\64"+
    "\7\63\16\0\1\3\60\0\1\3\1\65\7\0\1\66"+
    "\65\0\1\67\110\0\1\70\52\0\1\71\75\0\1\72"+
    "\51\0\1\73\103\0\1\74\73\0\1\75\57\0\1\76"+
    "\65\0\1\77\3\0\1\100\62\0\1\101\66\0\1\102"+
    "\110\0\1\103\40\0\1\104\100\0\1\105\53\0\1\106"+
    "\71\0\1\107\105\0\1\110\100\0\1\111\72\0\1\112"+
    "\20\0\1\113\113\0\1\114\36\0\1\115\1\64\1\116"+
    "\10\115\1\0\27\115\1\64\7\115\6\0\1\117\1\64"+
    "\1\116\3\0\13\64\1\0\37\64\6\0\1\120\2\64"+
    "\5\0\1\121\60\0\1\121\7\0\1\122\111\0\1\123"+
    "\53\0\1\124\63\0\1\125\102\0\1\126\64\0\1\127"+
    "\55\0\1\130\65\0\1\131\65\0\1\132\67\0\1\133"+
    "\66\0\1\134\74\0\1\135\70\0\1\136\72\0\1\137"+
    "\102\0\1\140\45\0\1\141\70\0\1\142\53\0\1\143"+
    "\113\0\1\144\36\0\1\145\134\0\1\146\20\0\1\147"+
    "\134\0\1\150\14\0\1\151\1\64\1\152\10\151\1\0"+
    "\27\151\1\64\7\151\6\0\1\117\1\64\1\152\3\0"+
    "\1\152\1\64\11\152\1\0\27\152\1\64\7\152\6\0"+
    "\1\153\1\64\1\152\35\0\1\154\47\0\1\155\64\0"+
    "\1\156\76\0\1\157\75\0\1\160\62\0\1\161\61\0"+
    "\1\162\65\0\1\163\75\0\1\164\53\0\1\165\73\0"+
    "\1\166\73\0\1\167\67\0\1\170\66\0\1\171\62\0"+
    "\1\172\102\0\1\173\77\0\1\174\50\0\1\175\65\0"+
    "\1\176\75\0\1\177\30\0\1\200\1\64\11\200\1\0"+
    "\27\200\1\64\7\200\6\0\1\117\1\64\1\200\3\0"+
    "\1\200\1\64\11\200\1\0\27\200\1\64\7\200\6\0"+
    "\1\153\1\64\1\200\37\0\1\201\46\0\1\202\76\0"+
    "\1\203\60\0\1\204\56\0\1\205\71\0\1\206\63\0"+
    "\1\207\102\0\1\210\71\0\1\211\63\0\1\212\54\0"+
    "\1\213\76\0\1\214\52\0\1\215\131\0\1\216\71\0"+
    "\1\217\63\0\1\220\17\0\1\221\1\64\11\221\1\0"+
    "\27\221\1\64\7\221\6\0\1\153\1\64\1\221\7\0"+
    "\1\222\73\0\1\223\102\0\1\224\65\0\1\225\65\0"+
    "\1\226\54\0\1\227\65\0\1\230\67\0\1\231\75\0"+
    "\1\232\104\0\1\233\65\0\1\234\67\0\1\235\30\0"+
    "\1\236\1\64\11\236\1\0\27\236\1\64\7\236\6\0"+
    "\1\153\1\64\1\236\42\0\1\237\53\0\1\240\73\0"+
    "\1\241\64\0\1\242\2\0\1\243\45\0\1\244\74\0"+
    "\1\245\60\0\1\246\74\0\1\247\55\0\1\250\112\0"+
    "\1\251\66\0\1\252\34\0\1\253\1\64\11\253\1\0"+
    "\27\253\1\64\7\253\6\0\1\153\1\64\1\253\46\0"+
    "\1\254\37\0\1\255\63\0\1\256\74\0\1\257\67\0"+
    "\1\260\110\0\1\261\53\0\1\262\53\0\1\263\111\0"+
    "\1\264\66\0\1\265\27\0\1\266\1\64\11\266\1\0"+
    "\27\266\1\64\7\266\6\0\1\153\1\64\1\266\32\0"+
    "\1\267\77\0\1\270\36\0\1\271\64\0\1\272\105\0"+
    "\1\273\66\0\1\274\63\0\1\275\44\0\1\276\1\64"+
    "\11\276\1\0\27\276\1\64\7\276\6\0\1\153\1\64"+
    "\1\276\35\0\1\277\61\0\1\300\52\0\1\301\71\0"+
    "\1\302\55\0\1\303\104\0\1\304\45\0\1\305\1\64"+
    "\11\305\1\0\27\305\1\64\7\305\6\0\1\153\1\64"+
    "\1\305\36\0\1\306\52\0\1\307\56\0\1\310\101\0"+
    "\1\311\65\0\1\312\55\0\1\313\56\0\13\64\1\0"+
    "\37\64\6\0\1\153\2\64\37\0\1\314\40\0\1\315"+
    "\105\0\1\316\65\0\1\317\77\0\1\320\50\0\1\321"+
    "\73\0\1\322\53\0\1\323\61\0\1\324\72\0\1\325"+
    "\66\0\1\326\74\0\1\327\106\0\1\330\36\0\1\331"+
    "\105\0\1\332\66\0\1\333\73\0\1\334\54\0\1\335"+
    "\65\0\1\336\66\0\1\337\106\0\1\340\40\0\1\341"+
    "\74\0\1\342\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\6\11\1\1\1\11\1\1\2\0"+
    "\1\11\60\0\2\11\1\1\1\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\10\0\1\11\2\0\2\11\5\0\1\11\6\0"+
    "\1\11\14\0\1\11\1\0\1\1\1\11\4\0\1\11"+
    "\1\0\1\1\5\0\1\11\6\0\2\11\7\0\1\11"+
    "\11\0\1\11\1\0\1\11\24\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoJson(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexicoJson(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return new Symbol(SimbolosJson.DOS_PUNTOS, yycolumn,yyline,yytext());
          }
        case 41: break;
        case 8: 
          { return new Symbol(SimbolosJson.CORCHETE_C, yycolumn,yyline,yytext());
          }
        case 42: break;
        case 14: 
          { System.out.println("map "+yyline+" "+yycolumn);return new Symbol(SimbolosJson.MAPA, yycolumn,yyline,yytext());
          }
        case 43: break;
        case 39: 
          { return new Symbol(SimbolosJson.PLANETAS_NEUTRALES, yycolumn,yyline,yytext());
          }
        case 44: break;
        case 20: 
          { return new Symbol(SimbolosJson.NAVES, yycolumn,yyline,yytext());
          }
        case 45: break;
        case 21: 
          { return new Symbol(SimbolosJson.FACIL, yycolumn,yyline,yytext());
          }
        case 46: break;
        case 3: 
          { return new Symbol(SimbolosJson.LLAVE_A, yycolumn,yyline,yytext());
          }
        case 47: break;
        case 27: 
          { return new Symbol(SimbolosJson.PLANETAS, yycolumn,yyline,yytext());
          }
        case 48: break;
        case 10: 
          { System.out.println("id"+yyline+" "+yycolumn);return new Symbol(SimbolosJson.ID, yycolumn,yyline,yytext());
          }
        case 49: break;
        case 23: 
          { return new Symbol(SimbolosJson.AL_AZAR, yycolumn,yyline,yytext());
          }
        case 50: break;
        case 1: 
          { System.out.println("ERROR "+yyline+" "+yycolumn);return new Symbol(SimbolosJson.ERROR,yycolumn,yyline,yytext());
          }
        case 51: break;
        case 2: 
          { System.out.println("ENTERO "+yyline+" "+yycolumn);return new Symbol(SimbolosJson.NUMERO, yycolumn,yyline,yytext());
          }
        case 52: break;
        case 6: 
          { return new Symbol(SimbolosJson.COMA, yycolumn,yyline,yytext());
          }
        case 53: break;
        case 28: 
          { return new Symbol(SimbolosJson.ACUMULAR, yycolumn,yyline,yytext());
          }
        case 54: break;
        case 32: 
          { return new Symbol(SimbolosJson.NEUTRALES, yycolumn,yyline,yytext());
          }
        case 55: break;
        case 16: 
          { return new Symbol(SimbolosJson.TRUE, yycolumn,yyline,yytext());
          }
        case 56: break;
        case 34: 
          { return new Symbol(SimbolosJson.PRODUCCION, yycolumn,yyline,yytext());
          }
        case 57: break;
        case 29: 
          { return new Symbol(SimbolosJson.COLUMNAS, yycolumn,yyline,yytext());
          }
        case 58: break;
        case 36: 
          { return new Symbol(SimbolosJson.FINALIZACION, yycolumn,yyline,yytext());
          }
        case 59: break;
        case 38: 
          { return new Symbol(SimbolosJson.PLANETAS_NEUTRALES_MIN, yycolumn,yyline,yytext());
          }
        case 60: break;
        case 33: 
          { return new Symbol(SimbolosJson.JUGADORES, yycolumn,yyline,yytext());
          }
        case 61: break;
        case 11: 
          { System.out.println("ID_NOMBRE "+yyline+" "+yycolumn);return new Symbol(SimbolosJson.ID_NOMBRE, yycolumn,yyline,yytext());
          }
        case 62: break;
        case 35: 
          { return new Symbol(SimbolosJson.MOSTRAR_NAVES, yycolumn,yyline,yytext());
          }
        case 63: break;
        case 4: 
          { return new Symbol(SimbolosJson.LLAVE_C, yycolumn,yyline,yytext());
          }
        case 64: break;
        case 24: 
          { return new Symbol(SimbolosJson.NOMBRE, yycolumn,yyline,yytext());
          }
        case 65: break;
        case 25: 
          { return new Symbol(SimbolosJson.HUMANO, yycolumn,yyline,yytext());
          }
        case 66: break;
        case 37: 
          { return new Symbol(SimbolosJson.PORCENTAJE_MUERTES, yycolumn,yyline,yytext());
          }
        case 67: break;
        case 26: 
          { return new Symbol(SimbolosJson.DIFICIL, yycolumn,yyline,yytext());
          }
        case 68: break;
        case 7: 
          { return new Symbol(SimbolosJson.CORCHETE_A, yycolumn,yyline,yytext());
          }
        case 69: break;
        case 40: 
          { return new Symbol(SimbolosJson.MOSTRAR_ESTADISTICAS, yycolumn,yyline,yytext());
          }
        case 70: break;
        case 30: 
          { return new Symbol(SimbolosJson.PLANETASMIN, yycolumn,yyline,yytext());
          }
        case 71: break;
        case 31: 
          { return new Symbol(SimbolosJson.MAPA_CIEGO, yycolumn,yyline,yytext());
          }
        case 72: break;
        case 18: 
          { return new Symbol(SimbolosJson.FILAS, yycolumn,yyline,yytext());
          }
        case 73: break;
        case 13: 
          { System.out.println("DECIMAL "+yyline+" "+yycolumn);return new Symbol(SimbolosJson.DECIMAL, yycolumn,yyline,yytext());
          }
        case 74: break;
        case 12: 
          { System.out.println("ID_MAPA "+yyline+" "+yycolumn);return new Symbol(SimbolosJson.ID_MAPA, yycolumn,yyline,yytext());
          }
        case 75: break;
        case 17: 
          { System.out.println("NOMBRE_JUGADOR "+yyline+" "+yycolumn);return new Symbol(SimbolosJson.NOMBRE_JUGADOR, yycolumn,yyline,yytext());
          }
        case 76: break;
        case 22: 
          { System.out.println("ta "+yyline+" "+yycolumn);return new Symbol(SimbolosJson.TAMAÑO, yycolumn,yyline,yytext());
          }
        case 77: break;
        case 15: 
          { return new Symbol(SimbolosJson.TIPO, yycolumn,yyline,yytext());
          }
        case 78: break;
        case 19: 
          { return new Symbol(SimbolosJson.FALSE, yycolumn,yyline,yytext());
          }
        case 79: break;
        case 9: 
          { 
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SimbolosJson.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface SimbolosJson
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = SimbolosJson.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoJson <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AnalizadorLexicoJson scanner = null;
        try {
          scanner = new AnalizadorLexicoJson( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
